CMAKE_MINIMUM_REQUIRED(VERSION 3.5)
PROJECT(HierarchyGrid VERSION 1.0.0)

#COMPILE SETTINGS
SET(CMAKE_BUILD_TYPE Release CACHE STRING "Compiler optimization level")
SET_PROPERTY(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS Debug Release)
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/cmake/ ${PROJECT_SOURCE_DIR}/extern/eigen/cmake)
#SET(CMAKE_BUILD_TYPE Debug)
IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
  MESSAGE(STATUS "Build type: Debug")
  IF(MSVC)
    SET(CMAKE_CXX_FLAGS "/bigobj -Wall ${CMAKE_CXX_FLAGS}")
  ELSE(MSVC)
    SET(CMAKE_CXX_FLAGS "-O0 -Wall -fPIC -fpermissive -Wno-unused-function -Wno-unused-local-typedefs ${CMAKE_CXX_FLAGS}")
  ENDIF(MSVC)
ELSE()
  MESSAGE(STATUS "Build type: Release")
  IF(MSVC)
    SET(CMAKE_CXX_FLAGS "/bigobj -Wall ${CMAKE_CXX_FLAGS}")
  ELSE(MSVC)
    SET(CMAKE_CXX_FLAGS "-O3 -Wall -fPIC -fpermissive -Wno-unused-function -Wno-unused-local-typedefs ${CMAKE_CXX_FLAGS}")
  ENDIF(MSVC)
ENDIF()
SET(CMAKE_CONFIGURATION_TYPES ${CMAKE_BUILD_TYPE})

#LIBRARY SETTINGS
INCLUDE("${PROJECT_SOURCE_DIR}/cmake/LoadLibs.cmake")

#THIRD PARTY HEADERS
ADD_DEFINITIONS(-DTORCH_INTERFACE)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/Grid)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/Grid/voxelizer)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/Grid/volumerender/cuda_samples)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/extern/trimesh2/include)
MACRO(SEARCH_SOURCE NAME DIRPRJ)
  FILE(GLOB_RECURSE header${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.h ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.hpp ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.hh)
  FILE(GLOB_RECURSE source${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cpp ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cc ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.c)
  FILE(GLOB_RECURSE cuda_source${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cu ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cuh)
ENDMACRO(SEARCH_SOURCE)
SEARCH_SOURCE(Grid Grid)
#SEARCH_SOURCE(Trimesh2 extern/trimesh2)

#BUILD LIBRARY
ADD_LIBRARY(Grid STATIC ${sourceGrid} ${headerGrid})# ${sourceTrimesh2} ${headerTrimesh2})
TARGET_COMPILE_OPTIONS(Grid PUBLIC "-std=c++17")
TARGET_LINK_LIBRARIES(Grid stdc++fs ${ALL_LIBRARIES})
#BUILD LIBRARY (GPU part)
SET(CUDA_SEPARABLE_COMPILATION ON)
SET(POSITION_INDEPENDENT_CODE ON)
CUDA_ADD_LIBRARY(GridGPU STATIC ${cuda_sourceGrid} OPTIONS --extended-lambda --expt-relaxed-constexpr --std=c++17)
TARGET_LINK_LIBRARIES(GridGPU Grid)

#EXE
MACRO(ADD_EXE NAME)
  ADD_EXECUTABLE(${NAME} Main/${NAME}.cpp)
  TARGET_LINK_LIBRARIES(${NAME} Grid GridGPU ${ALL_STATIC_LIBRARIES} ${CUDA_curand_LIBRARY} CUDA::cuda_driver)
ENDMACRO(ADD_EXE)

#DEBUG
ADD_EXE(main)
